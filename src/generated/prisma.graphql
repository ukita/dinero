# source: http://localhost:4466
# timestamp: Tue Dec 04 2018 00:07:32 GMT-0200 (Brasilia Summer Time)

type AggregateTransaction {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWallet {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createWallet(data: WalletCreateInput!): Wallet!
  createTransaction(data: TransactionCreateInput!): Transaction!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateWallet(data: WalletUpdateInput!, where: WalletWhereUniqueInput!): Wallet
  updateTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
  deleteUser(where: UserWhereUniqueInput!): User
  deleteWallet(where: WalletWhereUniqueInput!): Wallet
  deleteTransaction(where: TransactionWhereUniqueInput!): Transaction
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertWallet(where: WalletWhereUniqueInput!, create: WalletCreateInput!, update: WalletUpdateInput!): Wallet!
  upsertTransaction(where: TransactionWhereUniqueInput!, create: TransactionCreateInput!, update: TransactionUpdateInput!): Transaction!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyWallets(data: WalletUpdateManyMutationInput!, where: WalletWhereInput): BatchPayload!
  updateManyTransactions(data: TransactionUpdateManyMutationInput!, where: TransactionWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyWallets(where: WalletWhereInput): BatchPayload!
  deleteManyTransactions(where: TransactionWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  wallets(where: WalletWhereInput, orderBy: WalletOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Wallet]!
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction]!
  user(where: UserWhereUniqueInput!): User
  wallet(where: WalletWhereUniqueInput!): Wallet
  transaction(where: TransactionWhereUniqueInput!): Transaction
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  walletsConnection(where: WalletWhereInput, orderBy: WalletOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WalletConnection!
  transactionsConnection(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TransactionConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  wallet(where: WalletSubscriptionWhereInput): WalletSubscriptionPayload
  transaction(where: TransactionSubscriptionWhereInput): TransactionSubscriptionPayload
}

type Transaction implements Node {
  id: ID!
  wallet: Wallet!
  value: Int!
  type: TRANSACTION_TYPE!
  performedAt: DateTime!
  description: String
  tags: [String!]!
}

enum TRANSACTION_TYPE {
  EXPENSE
  INCOME
}

"""A connection to a list of items."""
type TransactionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TransactionEdge]!
  aggregate: AggregateTransaction!
}

input TransactionCreateInput {
  value: Int!
  type: TRANSACTION_TYPE!
  performedAt: DateTime!
  description: String
  tags: TransactionCreatetagsInput
  wallet: WalletCreateOneWithoutTransactionsInput!
}

input TransactionCreateManyWithoutWalletInput {
  create: [TransactionCreateWithoutWalletInput!]
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreatetagsInput {
  set: [String!]
}

input TransactionCreateWithoutWalletInput {
  value: Int!
  type: TRANSACTION_TYPE!
  performedAt: DateTime!
  description: String
  tags: TransactionCreatetagsInput
}

"""An edge in a connection."""
type TransactionEdge {
  """The item at the end of the edge."""
  node: Transaction!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TransactionOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
  type_ASC
  type_DESC
  performedAt_ASC
  performedAt_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TransactionPreviousValues {
  id: ID!
  value: Int!
  type: TRANSACTION_TYPE!
  performedAt: DateTime!
  description: String
  tags: [String!]!
}

input TransactionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TransactionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TransactionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TransactionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  value: Int

  """All values that are not equal to given value."""
  value_not: Int

  """All values that are contained in given list."""
  value_in: [Int!]

  """All values that are not contained in given list."""
  value_not_in: [Int!]

  """All values less than the given value."""
  value_lt: Int

  """All values less than or equal the given value."""
  value_lte: Int

  """All values greater than the given value."""
  value_gt: Int

  """All values greater than or equal the given value."""
  value_gte: Int
  type: TRANSACTION_TYPE

  """All values that are not equal to given value."""
  type_not: TRANSACTION_TYPE

  """All values that are contained in given list."""
  type_in: [TRANSACTION_TYPE!]

  """All values that are not contained in given list."""
  type_not_in: [TRANSACTION_TYPE!]
  performedAt: DateTime

  """All values that are not equal to given value."""
  performedAt_not: DateTime

  """All values that are contained in given list."""
  performedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  performedAt_not_in: [DateTime!]

  """All values less than the given value."""
  performedAt_lt: DateTime

  """All values less than or equal the given value."""
  performedAt_lte: DateTime

  """All values greater than the given value."""
  performedAt_gt: DateTime

  """All values greater than or equal the given value."""
  performedAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type TransactionSubscriptionPayload {
  mutation: MutationType!
  node: Transaction
  updatedFields: [String!]
  previousValues: TransactionPreviousValues
}

input TransactionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TransactionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TransactionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TransactionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TransactionWhereInput
}

input TransactionUpdateInput {
  value: Int
  type: TRANSACTION_TYPE
  performedAt: DateTime
  description: String
  tags: TransactionUpdatetagsInput
  wallet: WalletUpdateOneRequiredWithoutTransactionsInput
}

input TransactionUpdateManyDataInput {
  value: Int
  type: TRANSACTION_TYPE
  performedAt: DateTime
  description: String
  tags: TransactionUpdatetagsInput
}

input TransactionUpdateManyMutationInput {
  value: Int
  type: TRANSACTION_TYPE
  performedAt: DateTime
  description: String
  tags: TransactionUpdatetagsInput
}

input TransactionUpdateManyWithoutWalletInput {
  create: [TransactionCreateWithoutWalletInput!]
  connect: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  delete: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutWalletInput!]
  updateMany: [TransactionUpdateManyWithWhereNestedInput!]
  deleteMany: [TransactionScalarWhereInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutWalletInput!]
}

input TransactionUpdateManyWithWhereNestedInput {
  where: TransactionScalarWhereInput!
  data: TransactionUpdateManyDataInput!
}

input TransactionUpdatetagsInput {
  set: [String!]
}

input TransactionUpdateWithoutWalletDataInput {
  value: Int
  type: TRANSACTION_TYPE
  performedAt: DateTime
  description: String
  tags: TransactionUpdatetagsInput
}

input TransactionUpdateWithWhereUniqueWithoutWalletInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutWalletDataInput!
}

input TransactionUpsertWithWhereUniqueWithoutWalletInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutWalletDataInput!
  create: TransactionCreateWithoutWalletInput!
}

input TransactionWhereInput {
  """Logical AND on all given filters."""
  AND: [TransactionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TransactionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TransactionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  value: Int

  """All values that are not equal to given value."""
  value_not: Int

  """All values that are contained in given list."""
  value_in: [Int!]

  """All values that are not contained in given list."""
  value_not_in: [Int!]

  """All values less than the given value."""
  value_lt: Int

  """All values less than or equal the given value."""
  value_lte: Int

  """All values greater than the given value."""
  value_gt: Int

  """All values greater than or equal the given value."""
  value_gte: Int
  type: TRANSACTION_TYPE

  """All values that are not equal to given value."""
  type_not: TRANSACTION_TYPE

  """All values that are contained in given list."""
  type_in: [TRANSACTION_TYPE!]

  """All values that are not contained in given list."""
  type_not_in: [TRANSACTION_TYPE!]
  performedAt: DateTime

  """All values that are not equal to given value."""
  performedAt_not: DateTime

  """All values that are contained in given list."""
  performedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  performedAt_not_in: [DateTime!]

  """All values less than the given value."""
  performedAt_lt: DateTime

  """All values less than or equal the given value."""
  performedAt_lte: DateTime

  """All values greater than the given value."""
  performedAt_gt: DateTime

  """All values greater than or equal the given value."""
  performedAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  wallet: WalletWhereInput
}

input TransactionWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  name: String
  email: String!
  token: String
  tokenExpiry: Float
  createdAt: DateTime!
  updatedAt: DateTime!
  wallets(where: WalletWhereInput, orderBy: WalletOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Wallet!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String
  email: String!
  token: String
  tokenExpiry: Float
  wallets: WalletCreateManyWithoutUserInput
}

input UserCreateOneWithoutWalletsInput {
  create: UserCreateWithoutWalletsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutWalletsInput {
  name: String
  email: String!
  token: String
  tokenExpiry: Float
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  token_ASC
  token_DESC
  tokenExpiry_ASC
  tokenExpiry_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String
  email: String!
  token: String
  tokenExpiry: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  token: String
  tokenExpiry: Float
  wallets: WalletUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  token: String
  tokenExpiry: Float
}

input UserUpdateOneRequiredWithoutWalletsInput {
  create: UserCreateWithoutWalletsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutWalletsDataInput
  upsert: UserUpsertWithoutWalletsInput
}

input UserUpdateWithoutWalletsDataInput {
  name: String
  email: String
  token: String
  tokenExpiry: Float
}

input UserUpsertWithoutWalletsInput {
  update: UserUpdateWithoutWalletsDataInput!
  create: UserCreateWithoutWalletsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  token: String

  """All values that are not equal to given value."""
  token_not: String

  """All values that are contained in given list."""
  token_in: [String!]

  """All values that are not contained in given list."""
  token_not_in: [String!]

  """All values less than the given value."""
  token_lt: String

  """All values less than or equal the given value."""
  token_lte: String

  """All values greater than the given value."""
  token_gt: String

  """All values greater than or equal the given value."""
  token_gte: String

  """All values containing the given string."""
  token_contains: String

  """All values not containing the given string."""
  token_not_contains: String

  """All values starting with the given string."""
  token_starts_with: String

  """All values not starting with the given string."""
  token_not_starts_with: String

  """All values ending with the given string."""
  token_ends_with: String

  """All values not ending with the given string."""
  token_not_ends_with: String
  tokenExpiry: Float

  """All values that are not equal to given value."""
  tokenExpiry_not: Float

  """All values that are contained in given list."""
  tokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  tokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  tokenExpiry_lt: Float

  """All values less than or equal the given value."""
  tokenExpiry_lte: Float

  """All values greater than the given value."""
  tokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  tokenExpiry_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  wallets_every: WalletWhereInput
  wallets_some: WalletWhereInput
  wallets_none: WalletWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  token: String
}

type Wallet implements Node {
  id: ID!
  user: User!
  name: String!
  description: String
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction!]
}

"""A connection to a list of items."""
type WalletConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WalletEdge]!
  aggregate: AggregateWallet!
}

input WalletCreateInput {
  name: String!
  description: String
  user: UserCreateOneWithoutWalletsInput!
  transactions: TransactionCreateManyWithoutWalletInput
}

input WalletCreateManyWithoutUserInput {
  create: [WalletCreateWithoutUserInput!]
  connect: [WalletWhereUniqueInput!]
}

input WalletCreateOneWithoutTransactionsInput {
  create: WalletCreateWithoutTransactionsInput
  connect: WalletWhereUniqueInput
}

input WalletCreateWithoutTransactionsInput {
  name: String!
  description: String
  user: UserCreateOneWithoutWalletsInput!
}

input WalletCreateWithoutUserInput {
  name: String!
  description: String
  transactions: TransactionCreateManyWithoutWalletInput
}

"""An edge in a connection."""
type WalletEdge {
  """The item at the end of the edge."""
  node: Wallet!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WalletOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WalletPreviousValues {
  id: ID!
  name: String!
  description: String
}

input WalletScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [WalletScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [WalletScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WalletScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type WalletSubscriptionPayload {
  mutation: MutationType!
  node: Wallet
  updatedFields: [String!]
  previousValues: WalletPreviousValues
}

input WalletSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WalletSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WalletSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WalletSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WalletWhereInput
}

input WalletUpdateInput {
  name: String
  description: String
  user: UserUpdateOneRequiredWithoutWalletsInput
  transactions: TransactionUpdateManyWithoutWalletInput
}

input WalletUpdateManyDataInput {
  name: String
  description: String
}

input WalletUpdateManyMutationInput {
  name: String
  description: String
}

input WalletUpdateManyWithoutUserInput {
  create: [WalletCreateWithoutUserInput!]
  connect: [WalletWhereUniqueInput!]
  disconnect: [WalletWhereUniqueInput!]
  delete: [WalletWhereUniqueInput!]
  update: [WalletUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [WalletUpdateManyWithWhereNestedInput!]
  deleteMany: [WalletScalarWhereInput!]
  upsert: [WalletUpsertWithWhereUniqueWithoutUserInput!]
}

input WalletUpdateManyWithWhereNestedInput {
  where: WalletScalarWhereInput!
  data: WalletUpdateManyDataInput!
}

input WalletUpdateOneRequiredWithoutTransactionsInput {
  create: WalletCreateWithoutTransactionsInput
  connect: WalletWhereUniqueInput
  update: WalletUpdateWithoutTransactionsDataInput
  upsert: WalletUpsertWithoutTransactionsInput
}

input WalletUpdateWithoutTransactionsDataInput {
  name: String
  description: String
  user: UserUpdateOneRequiredWithoutWalletsInput
}

input WalletUpdateWithoutUserDataInput {
  name: String
  description: String
  transactions: TransactionUpdateManyWithoutWalletInput
}

input WalletUpdateWithWhereUniqueWithoutUserInput {
  where: WalletWhereUniqueInput!
  data: WalletUpdateWithoutUserDataInput!
}

input WalletUpsertWithoutTransactionsInput {
  update: WalletUpdateWithoutTransactionsDataInput!
  create: WalletCreateWithoutTransactionsInput!
}

input WalletUpsertWithWhereUniqueWithoutUserInput {
  where: WalletWhereUniqueInput!
  update: WalletUpdateWithoutUserDataInput!
  create: WalletCreateWithoutUserInput!
}

input WalletWhereInput {
  """Logical AND on all given filters."""
  AND: [WalletWhereInput!]

  """Logical OR on all given filters."""
  OR: [WalletWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WalletWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  user: UserWhereInput
  transactions_every: TransactionWhereInput
  transactions_some: TransactionWhereInput
  transactions_none: TransactionWhereInput
}

input WalletWhereUniqueInput {
  id: ID
}
